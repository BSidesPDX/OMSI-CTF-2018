* = complete with solution
+ = challenge written, needs solution

-- PWNABLES --

* 100 - bfbo - This challenge will give the player a binary with a vulnerable BO that they will need to use to jump into a function that normally wouldn't be called. This function will read a flag from disk and print it out to the user. This challenge requires the player to simply overflow a buffer, use the correct address of the uncalled func, and glory will be released!
* 200 - bfpl - This challenge will give the player the ability to run arbitrary shellcode to get the flag. Players will need to find /bin/sh, or any shellcode of their choice, to get the flag.

-- REVERSE ENGINEERING --

* 100 - sgnirts - Since this is an intro CTF, this challenge will force the player to use Linux commands to enumerate over a binary. The flag will be included in the binary as a string that can be found usings "strings", but with a twist requring some command line options!
+ 200 - sup3rs3ri4l - Force the player to reverse engineer a binary that uses a unique serial number to unlock hidden functionality. If the serial is correct, it will be the flag. This challenge will force the player to open a disassembler, run objdump, among other command line tools and view a small application.

--  WEB --

+ 100 - tmi - Login page to the tmi app provides a bit too much information by returning the string comparison result for a password stored in plaintext on the backend. Characters are compared one at a time and when a mismatch is found, the strcmp resust is returned (in a friendly way, e.g. failed with loop run i=5). This is simple enough that it can be brute forced by hand for those not familiar with automation. Covers: Request modification techniques. HTML parsing and debugging. Algorithm inference.

200 - buynow - Create a new account on this online CTF flag store, but you won't have enough money to buy the only item for sale, a CTF flag for this challenge. Transfer money from anoter account by modifying the json in a 'transfer' request from another account. Security on the transfer is enforced by knowing the 'session_secret' session id of the another account (which ends up being just the md5 of the account name!). Covers: Conceptual session hijacking.
